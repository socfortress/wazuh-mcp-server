name: Build and Release Package

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        flake8 wazuh_mcp_server --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 wazuh_mcp_server --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics

    - name: Check code formatting with black
      run: |
        black --check wazuh_mcp_server

    - name: Check import sorting with isort
      run: |
        isort --check-only wazuh_mcp_server

    - name: Type check with mypy
      run: |
        mypy wazuh_mcp_server --ignore-missing-imports
      continue-on-error: true

    - name: Test with pytest
      run: |
        pytest --cov=wazuh_mcp_server --cov-report=xml --cov-report=term-missing
      continue-on-error: true

  build:
    needs: test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for version detection

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel

    - name: Build source distribution
      run: |
        python -m build --sdist

    - name: Build wheel distribution
      run: |
        python -m build --wheel

    - name: Check built packages
      run: |
        python -m twine check dist/*
        ls -la dist/

    - name: Test package installation
      run: |
        # Create a fresh virtual environment for testing
        python -m venv test_env
        source test_env/bin/activate

        # Install the built wheel
        pip install dist/*.whl

        # Test imports
        python -c "import wazuh_mcp_server; print('âœ… Package imports successfully')"
        python -c "from wazuh_mcp_server import Config, WazuhClient, WazuhMCPServer; print('âœ… Main classes importable')"

        # Test CLI commands
        python -m wazuh_mcp_server --help
        wazuh-mcp-server --version

        # Test with example env vars (should fail gracefully)
        export WAZUH_PROD_URL=""
        export WAZUH_PROD_USERNAME=""
        export WAZUH_PROD_PASSWORD=""
        python -c "from wazuh_mcp_server import Config; print('âœ… Config module works')"

        deactivate

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 30

    - name: Generate package info
      run: |
        echo "## ðŸ“¦ Wazuh MCP Server Package" > package_info.md
        echo "" >> package_info.md
        echo "A production-ready Model Context Protocol server for Wazuh Manager integration." >> package_info.md
        echo "" >> package_info.md
        echo "### ðŸš€ Installation Options" >> package_info.md
        echo "" >> package_info.md
        echo "#### Option 1: Install from GitHub Release (Recommended)" >> package_info.md
        echo '```bash' >> package_info.md
        echo "# Download and install the wheel file" >> package_info.md
        echo "wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$(ls dist/*.whl | head -1 | xargs basename)" >> package_info.md
        echo "pip install $(ls dist/*.whl | head -1 | xargs basename)" >> package_info.md
        echo '```' >> package_info.md
        echo "" >> package_info.md
        echo "#### Option 2: Install directly from GitHub" >> package_info.md
        echo '```bash' >> package_info.md
        echo "pip install git+https://github.com/${{ github.repository }}.git@${{ github.ref_name }}" >> package_info.md
        echo '```' >> package_info.md
        echo "" >> package_info.md
        echo "#### Option 3: Install from source" >> package_info.md
        echo '```bash' >> package_info.md
        echo "# Download and install the source distribution" >> package_info.md
        echo "wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/$(ls dist/*.tar.gz | head -1 | xargs basename)" >> package_info.md
        echo "pip install $(ls dist/*.tar.gz | head -1 | xargs basename)" >> package_info.md
        echo '```' >> package_info.md
        echo "" >> package_info.md
        echo "### ðŸ”§ Usage" >> package_info.md
        echo '```bash' >> package_info.md
        echo "# Run the server" >> package_info.md
        echo "wazuh-mcp-server --help" >> package_info.md
        echo "python -m wazuh_mcp_server --port 8000" >> package_info.md
        echo '```' >> package_info.md
        echo "" >> package_info.md
        echo "### ðŸ“‹ Built Files" >> package_info.md
        echo '```' >> package_info.md
        ls -la dist/ >> package_info.md
        echo '```' >> package_info.md

    - name: Upload package info
      uses: actions/upload-artifact@v4
      with:
        name: package-info
        path: package_info.md

  publish-to-github:
    name: Create GitHub Release
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4

    - name: Download built packages
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Download package info
      uses: actions/download-artifact@v4
      with:
        name: package-info
        path: .

    - name: Set release variables
      id: release-vars
      run: |
        if [[ ${{ github.ref }} == refs/tags/v* ]]; then
          echo "tag_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "release_name=Release ${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}" >> $GITHUB_OUTPUT
        else
          # For main branch, create a latest release
          echo "tag_name=latest" >> $GITHUB_OUTPUT
          echo "release_name=Latest Development Build" >> $GITHUB_OUTPUT
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release-vars.outputs.tag_name }}
        name: ${{ steps.release-vars.outputs.release_name }}
        files: |
          dist/*.whl
          dist/*.tar.gz
        body_path: package_info.md
        draft: false
        prerelease: ${{ steps.release-vars.outputs.is_prerelease }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload-development-artifacts:
    name: Upload Development Artifacts
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Download built packages
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Generate development package info
      run: |
        echo "## ðŸš§ Development Build" > dev_package_info.md
        echo "" >> dev_package_info.md
        echo "**Branch:** \`${{ github.ref_name }}\`" >> dev_package_info.md
        echo "**Commit:** \`${{ github.sha }}\`" >> dev_package_info.md
        echo "**Build Date:** \`$(date -u)\`" >> dev_package_info.md
        echo "" >> dev_package_info.md
        echo "### ðŸ“¦ Installation" >> dev_package_info.md
        echo '```bash' >> dev_package_info.md
        echo "# Install latest development version" >> dev_package_info.md
        echo "pip install git+https://github.com/${{ github.repository }}.git@${{ github.ref_name }}" >> dev_package_info.md
        echo '```' >> dev_package_info.md
        echo "" >> dev_package_info.md
        echo "### ðŸ“‹ Built Files" >> dev_package_info.md
        echo '```' >> dev_package_info.md
        ls -la dist/ >> dev_package_info.md
        echo '```' >> dev_package_info.md

    - name: Comment on commit with artifact info
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const body = fs.readFileSync('dev_package_info.md', 'utf8');

          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: `## ðŸ“¦ Development Package Built\n\n${body}\n\n**Artifacts available for 30 days in [Actions](${context.payload.repository.html_url}/actions/runs/${context.runId})**`
          });
